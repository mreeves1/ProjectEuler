<?php
/**
 * Project Euler - Problem 45
 *
 * Triangular, pentagonal, and hexagonal
 *
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 * Triangle   T<sub>n</sub> = n(n+1)/2   1, 3, 6, 10, 15, ...
 * Pentagonal P<sub>n</sub> = n(3n−1)/2  1, 5, 12, 22, 35, ...
 * Hexagonal  H<sub>n</sub> = n(2n−1)    1, 6, 15, 28, 45, ...
 * 
 * It can be verified that T of 285 = P of 165 = H of 143 = 40755.
 * Find the next triangle number that is also pentagonal and hexagonal. 
 *
 * @category ProjectEuler
 * @package Problem45
 * @author Michael Reeves <mike.reeves@gmail.com>
 * @link http://projecteuler.net/problem=45
 *
 */
class Problem45 extends Problem_Abstract
{
    /**
     * Largest n we will generate Triangle, Pentagonal and Hexagonal numbers for
     * @const int UPPER_BOUND
     */
    const UPPER_BOUND = 1000000;

    /**
     * Override default timeout of 60 seconds
     */
    public function __construct()
    {
        parent::__construct(); 
    }

    /**
     * Wrapper method to output our answer with the appropriate input variables
     *
     * @return int
     */
    public function execute()
    {
        return $this->findNextTriPenHexNumber(self::UPPER_BOUND);
    }

    /**
     * Find the next number > 40755 that is a Triangle, Pentagonal and Hexagonal number.
     *
     * @param int $upper_bound Largest N that we will calculate a Triangle Number
     *
     * @return int Next Triangle, Pentagonal, Hexagonal Number
     */
    private function findNextTriPenHexNumber($upper_bound)
    {
        $hash = array();
        // $n_start = 2; // test case, should return 40755
        $n_start = 144; // problem case
        for ($n = $n_start; $n <= $upper_bound; $n++) {
            $t = $n * ($n + 1) / 2; // triangle number equation
            $p = $n * (3 * $n - 1) / 2; // pentagonal number equation
            $h = $n * (2 * $n - 1); // hexagonal number equation

            if (isset($hash[$t]) && $hash[$t] > 1) {
                return $t;
            }
            $hash[$h] = 1; // We will always hit this first
            if (isset($hash[$p])) {
                $hash[$p] =  $hash[$p] + 1; // We only care if we already have a hex number with this value
            }

        }
        die("Increase our upper bound greater than $upper_bound! :-(");
    }

}
