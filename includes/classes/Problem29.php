<?php
/**
 * Project Euler - Problem 29
 *
 * Distinct powers
 *
 * Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <=b <= 5:
 * 2^2=4, 2^3=8, 2^4=16, 2^5=32
 * 3^2=9, 3^3=27, 3^4=81, 3^5=243
 * 4^2=16, 4^3=64, 4^4=256, 4^5=1024
 * 5^2=25, 5^3=125, 5^4=625, 5^5=3125
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100? 
 *
 * @category ProjectEuler
 * @package Problem29
 * @author Michael Reeves <mike.reeves@gmail.com>
 * @link http://projecteuler.net/problem=29
 *
 */
class Problem29 extends Problem_Abstract
{

    /**
     * Project Euler says each problem should take no more than 1 minute. If your computer is slow make this larger.
     * $const int PROBLEM_TIMEOUT Used with set_timeout_limit to throw a timeout if problem computation takes too long.
     */
    const PROBLEM_TIMEOUT_OVERRIDE = 60;

    /**
     * Upper bound of integer and power (ie a and b)
     * @const int INPUT
     */
    const INPUT = 100;

    /**
     * Override default timeout of 60 seconds
     */
    public function __construct()
    {
        parent::__construct(); 
        set_time_limit(self::PROBLEM_TIMEOUT_OVERRIDE);
        if (!extension_loaded('bcmath')) {
            die('BCMath extension required. See http://www.php.net/manual/en/book.bc.php .');
        }
    }

    /**
     * Wrapper method to output our answer with the appropriate input variables
     *
     * @return int
     */
    public function execute()
    {
        return $this->countDistinctPowers(self::INPUT);
    }

    /**
     * Count the distinct count of unique integers from 
     * 2 to upper bound to the power of 2 to upper bound
     *
     * @param string $upperBound highest base integer and power
     *
     * @return int number of unique integers of $i^$j
     */
    private function countDistinctPowers($upperBound){
        $results = array();
        for ($i = 2; $i <= $upperBound; $i++) {
            for ($j = 2; $j <= $upperBound; $j++) {
                $result = bcpow($i, $j);
                $results[] = $result;
            }
        }
        $results = array_unique($results);
        asort($results);
        return count($results);
    }
}
