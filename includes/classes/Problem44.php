<?php
/**
 * Project Euler - Problem 44
 *
 * Pentagon numbers
 *
 * Pentagonal numbers are generated by the formula, P<sub>n</sub>=n(3n−1)/2. The first ten pentagonal numbers are:
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 * It can be seen that P<sub>4</sub> + P<sub>7</sub> = 22 + 70 = 92 = P<sub>8</sub>. However, their difference, 70 − 22 = 48, is not pentagonal.
 * Find the pair of pentagonal numbers, P<sub>j</sub> and P<sub>k</sub>, for which their sum and difference are pentagonal and D = |P<sub>k</sub> − P<sub>j</sub>| is minimised; what is the value of D? 
 *
 * @category ProjectEuler
 * @package Problem44
 * @author Michael Reeves <mike.reeves@gmail.com>
 * @link http://projecteuler.net/problem=44
 *
 */
class Problem44 extends Problem_Abstract
{
    /**
     * Value of n for largest Pentagonal Number - arbitrarily chosen... 
     * @const int UPPER_BOUND
     */
    const UPPER_BOUND = 10000;

    /**
     * Override default timeout of 60 seconds
     */
    public function __construct()
    {
        parent::__construct(); 
    }

    /**
     * Wrapper method to output our answer with the appropriate input variables
     *
     * @return int
     */
    public function execute()
    {
        return $this->findPentagonNumbersDiff(self::UPPER_BOUND);
    }

    /**
     * Find the minimal difference between 2 pentagonal numbers where their
     * sum and difference are both ALSO pentagonal
     *
     * @param string $upper_bound
     *
     * @return int difference of these two "special" pentagonal numbers
     */
    private function findPentagonNumbersDiff($upper_bound){
        $pen_numbers = $this->getPentagonalNumbers($upper_bound);
        $cnt = count($pen_numbers);
        // Holy crap, using a hash is so much faster then using in_array. 
        // Intellectually I know this yet still it never fails to impress 
        $pen_hash = array(); 
        for ($i = 0; $i < $cnt; $i++) {
            $num = $pen_numbers[$i];
            $pen_hash[$num] = $num;
        }
        for ($j = 0; $j < $cnt - 1; $j++) {
            // echo "Testing $pen_numbers[$j] \n"; // debug
            for ($k = $j + 1; $k < $cnt; $k++) {
                $p1 = $pen_numbers[$j];
                $p2 = $pen_numbers[$k];
                $diff = $p2 - $p1;
                $sum = $p1 + $p2;
                if (isset($pen_hash[$diff]) && isset($pen_hash[$sum])) {
                    // echo "p of $j is $p1, p of $k is $p2, difference is $diff, sum is $sum \n"; // debug
                    return $diff; 
                }
            }
        }
    }

    /**
     * Generate pentagonal numbers where n = 1 to $upper_bound where
     * Pentagonal numbers are generated by the formula, P of n = n(3n−1)/2
     *
     * @param string $upper_bound
     *
     * @return int array of first $upper_bound Pentagonal Numbers 
     */
    private function getPentagonalNumbers($upper_bound) 
    {    
        $pen_numbers = array();
        $n = 1;
        $pen_number = 1;
        while ($n <= $upper_bound) {
            $pen_number = $n * (3 * $n - 1) / 2;
            $pen_numbers[] = $pen_number;
            $n++;
        }
        // echo var_export($pen_numbers, true); // debug
        return $pen_numbers;
    }      
}
